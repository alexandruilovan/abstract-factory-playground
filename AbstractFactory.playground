import UIKit

enum ComponentType {
    case engine
    case transmission
}

protocol DisplayFactory {
    static func displayController(for type: ComponentType) -> DisplayController
    static func displayView(for type: ComponentType) -> DisplayView
}

protocol DisplayView {
    var contentView: UIView { get }
    var description: String { get }
}

class DisplayController: UIViewController {
    fileprivate var contentView: DisplayView
    
    init(contentView: DisplayView) {
        self.contentView = contentView
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

class CarDealershipViewFactory: DisplayFactory {
    static func displayView(for type: ComponentType) -> DisplayView {
        switch type {
        case .engine: return CarDisplayEngineView()
        case .transmission: return CarDisplayTransmissionView()
        }
    }
    
    static func displayController(for type: ComponentType) -> DisplayController {
        let controller = CarController(contentView: displayView(for: type))
        return controller
    }
}

class BoatDealershipViewFactory: DisplayFactory {
    static func displayView(for type: ComponentType) -> DisplayView {
        switch type {
        case .engine: return BoatDisplayEngineView()
        case .transmission: return BoatDisplayTransmissionView()
        }
    }
    
    static func displayController(for type: ComponentType) -> DisplayController {
        let controller = BoatController(contentView: displayView(for: type))
        return controller
    }
}

class BoatDisplayTransmissionView: UIView, DisplayView {
    
    private class BoatTransmissionContentView: UIView {
        // transmission view features
    }
    
    var contentView: UIView = BoatTransmissionContentView()
}

class BoatDisplayEngineView: UIView, DisplayView {
    private class BoatEngineContentView: UIView {
        // engine view features
    }
    
    var contentView: UIView = BoatDisplayEngineView()
}

class CarDisplayTransmissionView: UIView, DisplayView {
    
    private class CarTransmissionView: UIView {
        // transmission view features
    }
    
    var contentView: UIView = CarTransmissionView()
}

class CarDisplayEngineView: UIView, DisplayView {
    
    private class CarEngineView: UIView {
        // engine view features
    }
    
    var contentView: UIView = CarEngineView()
}

class CarController: DisplayController {
    // car features
}

class BoatController: DisplayController {
    // boat features
}


class RepairShopApp {
    private var currentController: DisplayController?
    
    private let factoryType: DisplayFactory.Type
    
    init(factoryType: DisplayFactory.Type) {
        self.factoryType = factoryType
    }
    
    func presentTransmission() {
        let controller = factoryType.displayController(for: .transmission)
        UINavigationController(rootViewController: controller)
    }
    
    func presentEngine() {
        let controller = factoryType.displayController(for: .engine)
        UINavigationController(rootViewController: controller)
    }
}
